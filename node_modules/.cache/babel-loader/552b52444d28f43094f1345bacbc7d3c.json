{"ast":null,"code":"var _jsxFileName = \"/Users/ivanvaci/Downloads/personal/tinder-study/src/components/SwipeLeftOrRight.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport TinderCard from 'react-tinder-card';\nimport { Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleVisibility, setAnswer } from \"../hideSlice\";\nimport { Card, Form, Table } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SwipeLeftOrRight(props) {\n  _s();\n\n  const showElement = useSelector(state => state.hide.shownElements);\n  const questionElement = useSelector(state => state.hide.questions);\n  const dbToChose = useSelector(state => state.hide.dbPics);\n  let db = questionElement.pol == \"Muški\" ? dbToChose[\"Ženski\"] : dbToChose[\"Muški\"];\n  const [showCard, setShowCard] = useState(db);\n  const [swiperResults, setswiperResults] = useState([]);\n  useEffect(() => {\n    const shuffled = questionElement.pol == \"Muški\" ? shuffle(dbToChose[\"Ženski\"]) : shuffle(dbToChose[\"Muški\"]);\n    setShowCard(shuffled);\n  }, [questionElement.pol]);\n  const context = props.content;\n  const key = props.keyForContext;\n  const dispatch = useDispatch();\n\n  function setSwipe(code, direction) {\n    swiperResults[code] = direction;\n    setswiperResults(swiperResults);\n    console.log(swiperResults);\n\n    if (showCard.length === 1) {// dispatch(setAnswer({ keyForQuestion: key, value: swiperResults }))\n      // dispatch(toggleVisibility({ state: showElement, next: \"perSwipe\", current: key }))\n    }\n\n    const yty = showCard.filter(card => !card.url.includes(code));\n    setShowCard(yty);\n  }\n\n  function customTinderCard(character) {\n    let code = character.url.replace(\"/images/muska_lica/\", \"\").replace(\"/images/zenska_lica/\", \"\").replace(\".jpg\", \"\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tinderCards__cardContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundImage: `url(${character.url})`\n            },\n            className: \"cardCustom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-danger\",\n        className: \"swipeButton\",\n        onClick: () => setSwipe(code, 'dislike'),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/images/cards/cross.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 106\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-success\",\n        className: \"swipeButton\",\n        onClick: () => setSwipe(code, 'like'),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/images/cards/tick.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 104\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this);\n  }\n\n  function shuffle(arrayS) {\n    let array = [...arrayS];\n    let currentIndex = array.length,\n        randomIndex; // While there remain elements to shuffle.\n\n    while (currentIndex != 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--; // And swap it with the current element.\n\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n  const Tinder = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardContainer\",\n      children: customTinderCard(showCard[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: showElement[key] && db != \"\" ? /*#__PURE__*/_jsxDEV(Tinder, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SwipeLeftOrRight, \"K4F3yYpcSO+YogSUBtc77KCZa3g=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = SwipeLeftOrRight;\nexport default SwipeLeftOrRight;\n\nvar _c;\n\n$RefreshReg$(_c, \"SwipeLeftOrRight\");","map":{"version":3,"sources":["/Users/ivanvaci/Downloads/personal/tinder-study/src/components/SwipeLeftOrRight.jsx"],"names":["React","useState","useEffect","TinderCard","Button","useDispatch","useSelector","toggleVisibility","setAnswer","Card","Form","Table","SwipeLeftOrRight","props","showElement","state","hide","shownElements","questionElement","questions","dbToChose","dbPics","db","pol","showCard","setShowCard","swiperResults","setswiperResults","shuffled","shuffle","context","content","key","keyForContext","dispatch","setSwipe","code","direction","console","log","length","yty","filter","card","url","includes","customTinderCard","character","replace","backgroundImage","arrayS","array","currentIndex","randomIndex","Math","floor","random","Tinder"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport TinderCard from 'react-tinder-card'\nimport { Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleVisibility, setAnswer } from \"../hideSlice\";\nimport { Card, Form, Table } from \"react-bootstrap\";\n\n\nfunction SwipeLeftOrRight(props) {\n  const showElement = useSelector(state => state.hide.shownElements);\n  const questionElement = useSelector(state => state.hide.questions);\n  const dbToChose = useSelector(state => state.hide.dbPics);\n  let db = questionElement.pol == \"Muški\" ? dbToChose[\"Ženski\"] : dbToChose[\"Muški\"];\n  const [showCard, setShowCard] = useState(db);\n  const [swiperResults, setswiperResults] = useState([]);\n\n  useEffect(() => {\n    const shuffled  = questionElement.pol == \"Muški\" ? shuffle(dbToChose[\"Ženski\"]) : shuffle(dbToChose[\"Muški\"])\n    setShowCard( shuffled);\n  }, [questionElement.pol]);\n\n\n  const context = props.content\n  const key = props.keyForContext\n  const dispatch = useDispatch();\n\n  function setSwipe(code, direction) {\n\n    swiperResults[code] = direction;\n    setswiperResults(swiperResults);\n    console.log(swiperResults);\n    if (showCard.length === 1) {\n      // dispatch(setAnswer({ keyForQuestion: key, value: swiperResults }))\n      // dispatch(toggleVisibility({ state: showElement, next: \"perSwipe\", current: key }))\n    }\n    const yty = showCard.filter(card => !card.url.includes(code))\n    setShowCard(yty)\n  }\n\n  function customTinderCard(character) {\n    let code = character.url.replace(\"/images/muska_lica/\", \"\").replace(\"/images/zenska_lica/\", \"\").replace(\".jpg\", \"\")\n        \n    return (\n    <div>\n    <div className=\"tinderCards__cardContainer\">\n        <div>\n          <div\n            style={{ backgroundImage: `url(${character.url})` }}\n            className=\"cardCustom\"\n          >\n          </div>\n        </div>\n    </div>\n      <Button variant=\"outline-danger\" className='swipeButton' onClick={() => setSwipe(code, 'dislike')}><img src=\"/images/cards/cross.png\" /></Button>\n      <Button variant=\"outline-success\" className='swipeButton' onClick={() => setSwipe(code, 'like')}><img src=\"/images/cards/tick.png\" /></Button>\n  </div>\n    )\n  }\n\n  function shuffle(arrayS) {\n    let array = [...arrayS];\n    let currentIndex = array.length,  randomIndex;\n\n    // While there remain elements to shuffle.\n    while (currentIndex != 0) {\n  \n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\n  const Tinder = () => {\n    return (\n      <div className='cardContainer'>\n          {customTinderCard(showCard[0])}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      {(showElement[key] && db != \"\") ?\n        <Tinder /> : null\n      }\n    </div>\n  )\n}\n\nexport default SwipeLeftOrRight;\n"]},"metadata":{},"sourceType":"module"}