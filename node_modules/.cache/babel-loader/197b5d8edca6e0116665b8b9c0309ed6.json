{"ast":null,"code":"var _jsxFileName = \"/Users/ivanvaci/Downloads/personal/tinder-study/src/components/MultiRadioModal.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Modal, Button, Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleVisibility, setAnswer } from \"../hideSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction MultiRadioModal(props) {\n  _s();\n\n  const context = props.content;\n  const key = props.keyForContext;\n  let radioChecker = {};\n  const dispatch = useDispatch();\n  const showElement = useSelector(state => state.hide.shownElements);\n  const currentState = useSelector(state => state.hide.questions);\n\n  function sendAnswers(key, radioChecker) {\n    dispatch(toggleVisibility({\n      state: showElement,\n      next: props.content.next,\n      current: key\n    }));\n    dispatch(setAnswer({\n      keyForQuestion: key,\n      value: radioChecker,\n      currentState\n    }));\n  }\n\n  function checkIfAllAreSelected(radioGroup, indexNum) {\n    radioChecker[radioGroup] = indexNum;\n    let readyForDispatch = true;\n\n    for (const radio in radioChecker) {\n      if (radioChecker[radio] === 0) {\n        readyForDispatch = false;\n      }\n    }\n\n    if (readyForDispatch) {\n      sendAnswers(key, radioChecker);\n    }\n  }\n\n  function rowWithRadio(head, numOfRadios) {\n    const rows = [];\n    const groupNum = Math.floor(Math.random() * 1000000);\n\n    for (let index = 1; index < numOfRadios + 1; index++) {\n      const group = head;\n      const id = \"inline-\" + groupNum + \"-\" + index;\n      radioChecker[group] = 0;\n      rows.push( /*#__PURE__*/_jsxDEV(Form.Check, {\n        inline: true,\n        label: index,\n        name: group,\n        type: \"radio\",\n        id: id,\n        onClick: () => {\n          checkIfAllAreSelected(group, index);\n        }\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [head, \" \", rows, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true);\n  }\n\n  function loop(content) {\n    const rows = [];\n    {\n      content[\"multiRadioOptions\"][\"traits\"].map(trait => rows.push(rowWithRadio(trait, content[\"multiRadioOptions\"][\"levels\"])));\n    }\n    return rows;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"xl\",\n      show: showElement[key],\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: context.headerText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: loop(context)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(MultiRadioModal, \"NhLdy7anXNglhLl75FFK+0ORCRY=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = MultiRadioModal;\nexport default MultiRadioModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiRadioModal\");","map":{"version":3,"sources":["/Users/ivanvaci/Downloads/personal/tinder-study/src/components/MultiRadioModal.jsx"],"names":["useState","Modal","Button","Form","useDispatch","useSelector","toggleVisibility","setAnswer","MultiRadioModal","props","context","content","key","keyForContext","radioChecker","dispatch","showElement","state","hide","shownElements","currentState","questions","sendAnswers","next","current","keyForQuestion","value","checkIfAllAreSelected","radioGroup","indexNum","readyForDispatch","radio","rowWithRadio","head","numOfRadios","rows","groupNum","Math","floor","random","index","group","id","push","loop","map","trait","headerText"],"mappings":"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","sourcesContent":["import {useState} from 'react';\nimport {Modal, Button, Form} from \"react-bootstrap\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleVisibility, setAnswer } from \"../hideSlice\";\n\nfunction MultiRadioModal(props) {\n  const context = props.content\n  const key = props.keyForContext\n  let radioChecker = {}\n\n\n  const dispatch = useDispatch();\n  const showElement = useSelector(state => state.hide.shownElements);\n  const currentState = useSelector(state => state.hide.questions);\n\n  function sendAnswers (key, radioChecker) {\n    dispatch(toggleVisibility({state: showElement, next: props.content.next, current: key}))\n    dispatch(setAnswer({keyForQuestion: key, value: radioChecker, currentState}))\n  }\n\n  function checkIfAllAreSelected (radioGroup, indexNum) {\n    radioChecker[radioGroup] = indexNum\n    let readyForDispatch = true;\n    for (const radio in radioChecker) {\n      if(radioChecker[radio] === 0){\n        readyForDispatch = false;\n      }\n    }\n    if(readyForDispatch){\n      sendAnswers(key, radioChecker)\n    }\n  }\n\n  function rowWithRadio (head, numOfRadios) {\n\n    const rows = []\n    const groupNum = Math.floor(Math.random() * 1000000);\n    \n    for (let index = 1; index < numOfRadios + 1 ; index++) {\n      const group = head;\n      const id = \"inline-\"+groupNum+\"-\"+index\n      radioChecker[group] = 0;\n      rows.push(\n        <Form.Check\n          inline\n          label={index}\n          name={group}\n          type='radio'\n          id={id}\n          key={id}\n          onClick={() => {checkIfAllAreSelected(group, index);}}\n        />\n      )\n    }\n    return <>{head} {rows}<br/></>\n  }\n\n  function loop(content) {\n    const rows = []\n    {content[\"multiRadioOptions\"][\"traits\"].map((trait) => (\n      rows.push(rowWithRadio(trait, content[\"multiRadioOptions\"][\"levels\"]) )\n    ))}\n    return rows\n  }\n  return (\n    <>\n      <Modal\n      size=\"xl\"\n      show={showElement[key]}\n      >\n        <Modal.Header>\n            <Modal.Title>{context.headerText}</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            {loop(context)}\n          </Form>\n        </Modal.Body>\n        </Modal>\n    </>\n  );\n}\n\nexport default MultiRadioModal;\n"]},"metadata":{},"sourceType":"module"}