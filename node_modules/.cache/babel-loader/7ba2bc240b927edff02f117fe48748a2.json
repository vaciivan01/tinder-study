{"ast":null,"code":"var _jsxFileName = \"/Users/ivanvaci/Downloads/personal/tinder-study/src/components/MultiRadioModal.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Modal, Button, Form, Table } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleVisibility, setAnswer } from \"../hideSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction MultiRadioModal(props) {\n  _s();\n\n  const context = props.content;\n  const key = props.keyForContext;\n  let radioChecker = {};\n  const dispatch = useDispatch();\n  const showElement = useSelector(state => state.hide.shownElements);\n  const currentState = useSelector(state => state.hide.questions);\n\n  function sendAnswers(key, radioChecker) {\n    dispatch(toggleVisibility({\n      state: showElement,\n      next: props.content.next,\n      current: key\n    }));\n    dispatch(setAnswer({\n      keyForQuestion: key,\n      value: radioChecker,\n      currentState\n    }));\n  }\n\n  function checkIfAllAreSelected(radioGroup, indexNum) {\n    radioChecker[radioGroup] = indexNum;\n    let readyForDispatch = true;\n\n    for (const radio in radioChecker) {\n      if (radioChecker[radio] === 0) {\n        readyForDispatch = false;\n      }\n    }\n\n    if (readyForDispatch) {\n      sendAnswers(key, radioChecker);\n    }\n  }\n\n  function rowWithRadio(head, numOfRadios) {\n    const rows = [];\n    const groupNum = Math.floor(Math.random() * 1000000);\n\n    for (let index = 1; index < numOfRadios + 1; index++) {\n      const group = head;\n      const id = \"inline-\" + groupNum + \"-\" + index;\n      radioChecker[group] = 0;\n      rows.push( /*#__PURE__*/_jsxDEV(Form.Check, {\n        inline: true,\n        label: index,\n        name: group,\n        type: \"radio\",\n        id: id,\n        onClick: () => {\n          checkIfAllAreSelected(group, index);\n        }\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [head, \" \", rows, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true);\n  }\n\n  function checkSelected(osob, elem, key) {\n    osobineValues[osob] = elem + 1;\n\n    if (Object.keys(osobineValues).length === 6) {\n      let tst = {};\n      tst[key] = osobineValues;\n      sendAnswers(tst);\n    }\n  }\n\n  function loop(content) {\n    const rows = [];\n    {\n      content[\"multiRadioOptions\"][\"traits\"].map(trait => rows.push(rowWithRadio(trait, content[\"multiRadioOptions\"][\"levels\"])));\n    }\n    return rows;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"xl\",\n      show: showElement[key],\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: context.headerText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          striped: true,\n          bordered: true,\n          hover: true,\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"5\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: context[\"multiRadioOptions\"][\"traits\"].map(osob => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: osob\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 53\n                }, this), [...Array(7)].map((elem, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                    inline: true,\n                    name: osob,\n                    type: \"radio\",\n                    id: elem,\n                    onClick: () => {\n                      checkSelected(osob, index, imageKey);\n                    }\n                  }, elem, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 104,\n                    columnNumber: 61\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 57\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 49\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(MultiRadioModal, \"NhLdy7anXNglhLl75FFK+0ORCRY=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = MultiRadioModal;\nexport default MultiRadioModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiRadioModal\");","map":{"version":3,"sources":["/Users/ivanvaci/Downloads/personal/tinder-study/src/components/MultiRadioModal.jsx"],"names":["useState","Modal","Button","Form","Table","useDispatch","useSelector","toggleVisibility","setAnswer","MultiRadioModal","props","context","content","key","keyForContext","radioChecker","dispatch","showElement","state","hide","shownElements","currentState","questions","sendAnswers","next","current","keyForQuestion","value","checkIfAllAreSelected","radioGroup","indexNum","readyForDispatch","radio","rowWithRadio","head","numOfRadios","rows","groupNum","Math","floor","random","index","group","id","push","checkSelected","osob","elem","osobineValues","Object","keys","length","tst","loop","map","trait","headerText","Array","imageKey"],"mappings":"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","sourcesContent":["import {useState} from 'react';\nimport {Modal, Button, Form, Table} from \"react-bootstrap\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleVisibility, setAnswer } from \"../hideSlice\";\n\nfunction MultiRadioModal(props) {\n  const context = props.content\n  const key = props.keyForContext\n  let radioChecker = {}\n\n\n  const dispatch = useDispatch();\n  const showElement = useSelector(state => state.hide.shownElements);\n  const currentState = useSelector(state => state.hide.questions);\n\n  function sendAnswers (key, radioChecker) {\n    dispatch(toggleVisibility({state: showElement, next: props.content.next, current: key}))\n    dispatch(setAnswer({keyForQuestion: key, value: radioChecker, currentState}))\n  }\n\n  function checkIfAllAreSelected (radioGroup, indexNum) {\n    radioChecker[radioGroup] = indexNum\n    let readyForDispatch = true;\n    for (const radio in radioChecker) {\n      if(radioChecker[radio] === 0){\n        readyForDispatch = false;\n      }\n    }\n    if(readyForDispatch){\n      sendAnswers(key, radioChecker)\n    }\n  }\n\n  function rowWithRadio (head, numOfRadios) {\n\n    const rows = []\n    const groupNum = Math.floor(Math.random() * 1000000);\n    \n    for (let index = 1; index < numOfRadios + 1 ; index++) {\n      const group = head;\n      const id = \"inline-\"+groupNum+\"-\"+index\n      radioChecker[group] = 0;\n      rows.push(\n        <Form.Check\n          inline\n          label={index}\n          name={group}\n          type='radio'\n          id={id}\n          key={id}\n          onClick={() => {checkIfAllAreSelected(group, index);}}\n        />\n      )\n    }\n    return <>{head} {rows}<br/></>\n  }\n\n  function checkSelected(osob, elem, key){\n      osobineValues[osob] = elem + 1\n      if(Object.keys(osobineValues).length === 6){\n          let tst = {}\n          tst[key] = osobineValues\n          sendAnswers(tst)\n      }\n  }\n\n  function loop(content) {\n    const rows = []\n    {content[\"multiRadioOptions\"][\"traits\"].map((trait) => (\n      rows.push(rowWithRadio(trait, content[\"multiRadioOptions\"][\"levels\"]) )\n    ))}\n    return rows\n  }\n  return (\n    <>\n      <Modal\n      size=\"xl\"\n      show={showElement[key]}\n      >\n        <Modal.Header>\n            <Modal.Title>{context.headerText}</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n        <Table striped bordered hover>\n                                    <thead>\n                                        <tr>\n                                            <th></th>\n                                            <th>1</th>\n                                            <th>2</th>\n                                            <th>3</th>\n                                            <th>4</th>\n                                            <th>5</th>\n                                            <th>6</th>\n                                            <th>7</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {context[\"multiRadioOptions\"][\"traits\"].map((osob) => {\n                                            return(\n                                                <tr>\n                                                    <td>{osob}</td>\n                                                    {[...Array(7)].map((elem, index) => (\n                                                        <td><Form.Check inline name={osob} type='radio' id={elem} key={elem} onClick={() => { checkSelected(osob, index, imageKey); }} /></td>\n                                                    ))}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n                                </Table>\n          {/* <Form>\n            {loop(context)}\n          </Form> */}\n        </Modal.Body>\n        </Modal>\n    </>\n  );\n}\n\nexport default MultiRadioModal;\n"]},"metadata":{},"sourceType":"module"}