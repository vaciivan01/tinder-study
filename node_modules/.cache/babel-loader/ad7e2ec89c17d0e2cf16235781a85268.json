{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dns_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar dns_v2;\n\n(function (dns_v2) {\n  /**\n   * Cloud DNS API\n   *\n   *\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const dns = google.dns('v2');\n   * ```\n   */\n  class Dns {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.changes = new Resource$Changes(this.context);\n      this.dnsKeys = new Resource$Dnskeys(this.context);\n      this.managedZoneOperations = new Resource$Managedzoneoperations(this.context);\n      this.managedZones = new Resource$Managedzones(this.context);\n      this.policies = new Resource$Policies(this.context);\n      this.projects = new Resource$Projects(this.context);\n      this.resourceRecordSets = new Resource$Resourcerecordsets(this.context);\n      this.responsePolicies = new Resource$Responsepolicies(this.context);\n      this.responsePolicyRules = new Resource$Responsepolicyrules(this.context);\n    }\n\n  }\n\n  dns_v2.Dns = Dns;\n\n  class Resource$Changes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone'],\n        pathParams: ['location', 'managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/changes/{changeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone', 'changeId'],\n        pathParams: ['changeId', 'location', 'managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone'],\n        pathParams: ['location', 'managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v2.Resource$Changes = Resource$Changes;\n\n  class Resource$Dnskeys {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone', 'dnsKeyId'],\n        pathParams: ['dnsKeyId', 'location', 'managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/dnsKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone'],\n        pathParams: ['location', 'managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v2.Resource$Dnskeys = Resource$Dnskeys;\n\n  class Resource$Managedzoneoperations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone', 'operation'],\n        pathParams: ['location', 'managedZone', 'operation', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone'],\n        pathParams: ['location', 'managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v2.Resource$Managedzoneoperations = Resource$Managedzoneoperations;\n\n  class Resource$Managedzones {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'location'],\n        pathParams: ['location', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone'],\n        pathParams: ['location', 'managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone'],\n        pathParams: ['location', 'managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location'],\n        pathParams: ['location', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone'],\n        pathParams: ['location', 'managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone'],\n        pathParams: ['location', 'managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v2.Resource$Managedzones = Resource$Managedzones;\n\n  class Resource$Policies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/policies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'location'],\n        pathParams: ['location', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'policy'],\n        pathParams: ['location', 'policy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'policy'],\n        pathParams: ['location', 'policy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/policies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location'],\n        pathParams: ['location', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'policy'],\n        pathParams: ['location', 'policy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'policy'],\n        pathParams: ['location', 'policy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v2.Resource$Policies = Resource$Policies;\n\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location'],\n        pathParams: ['location', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v2.Resource$Projects = Resource$Projects;\n\n  class Resource$Resourcerecordsets {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone'],\n        pathParams: ['location', 'managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets/{name}/{type}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone', 'name', 'type'],\n        pathParams: ['location', 'managedZone', 'name', 'project', 'type'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets/{name}/{type}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone', 'name', 'type'],\n        pathParams: ['location', 'managedZone', 'name', 'project', 'type'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone'],\n        pathParams: ['location', 'managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets/{name}/{type}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'managedZone', 'name', 'type'],\n        pathParams: ['location', 'managedZone', 'name', 'project', 'type'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v2.Resource$Resourcerecordsets = Resource$Resourcerecordsets;\n\n  class Resource$Responsepolicies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/responsePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'location'],\n        pathParams: ['location', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'responsePolicy'],\n        pathParams: ['location', 'project', 'responsePolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'responsePolicy'],\n        pathParams: ['location', 'project', 'responsePolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/responsePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location'],\n        pathParams: ['location', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'responsePolicy'],\n        pathParams: ['location', 'project', 'responsePolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'responsePolicy'],\n        pathParams: ['location', 'project', 'responsePolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v2.Resource$Responsepolicies = Resource$Responsepolicies;\n\n  class Resource$Responsepolicyrules {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'responsePolicy'],\n        pathParams: ['location', 'project', 'responsePolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'responsePolicy', 'responsePolicyRule'],\n        pathParams: ['location', 'project', 'responsePolicy', 'responsePolicyRule'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'responsePolicy', 'responsePolicyRule'],\n        pathParams: ['location', 'project', 'responsePolicy', 'responsePolicyRule'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'responsePolicy'],\n        pathParams: ['location', 'project', 'responsePolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'responsePolicy', 'responsePolicyRule'],\n        pathParams: ['location', 'project', 'responsePolicy', 'responsePolicyRule'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'location', 'responsePolicy', 'responsePolicyRule'],\n        pathParams: ['location', 'project', 'responsePolicy', 'responsePolicyRule'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v2.Resource$Responsepolicyrules = Resource$Responsepolicyrules;\n})(dns_v2 = exports.dns_v2 || (exports.dns_v2 = {}));","map":{"version":3,"sources":["/Users/ivanvaci/Downloads/personal/tinder-study/node_modules/googleapis/build/src/apis/dns/v2.js"],"names":["Object","defineProperty","exports","value","dns_v2","googleapis_common_1","require","Dns","constructor","options","google","context","_options","changes","Resource$Changes","dnsKeys","Resource$Dnskeys","managedZoneOperations","Resource$Managedzoneoperations","managedZones","Resource$Managedzones","policies","Resource$Policies","projects","Resource$Projects","resourceRecordSets","Resource$Resourcerecordsets","responsePolicies","Resource$Responsepolicies","responsePolicyRules","Resource$Responsepolicyrules","create","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","list","delete","patch","update"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dns_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar dns_v2;\n(function (dns_v2) {\n    /**\n     * Cloud DNS API\n     *\n     *\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const dns = google.dns('v2');\n     * ```\n     */\n    class Dns {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.changes = new Resource$Changes(this.context);\n            this.dnsKeys = new Resource$Dnskeys(this.context);\n            this.managedZoneOperations = new Resource$Managedzoneoperations(this.context);\n            this.managedZones = new Resource$Managedzones(this.context);\n            this.policies = new Resource$Policies(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.resourceRecordSets = new Resource$Resourcerecordsets(this.context);\n            this.responsePolicies = new Resource$Responsepolicies(this.context);\n            this.responsePolicyRules = new Resource$Responsepolicyrules(this.context);\n        }\n    }\n    dns_v2.Dns = Dns;\n    class Resource$Changes {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone'],\n                pathParams: ['location', 'managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/changes/{changeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone', 'changeId'],\n                pathParams: ['changeId', 'location', 'managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone'],\n                pathParams: ['location', 'managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v2.Resource$Changes = Resource$Changes;\n    class Resource$Dnskeys {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone', 'dnsKeyId'],\n                pathParams: ['dnsKeyId', 'location', 'managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/dnsKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone'],\n                pathParams: ['location', 'managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v2.Resource$Dnskeys = Resource$Dnskeys;\n    class Resource$Managedzoneoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone', 'operation'],\n                pathParams: ['location', 'managedZone', 'operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone'],\n                pathParams: ['location', 'managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v2.Resource$Managedzoneoperations = Resource$Managedzoneoperations;\n    class Resource$Managedzones {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'location'],\n                pathParams: ['location', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone'],\n                pathParams: ['location', 'managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone'],\n                pathParams: ['location', 'managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location'],\n                pathParams: ['location', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone'],\n                pathParams: ['location', 'managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone'],\n                pathParams: ['location', 'managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v2.Resource$Managedzones = Resource$Managedzones;\n    class Resource$Policies {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/policies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'location'],\n                pathParams: ['location', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'policy'],\n                pathParams: ['location', 'policy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'policy'],\n                pathParams: ['location', 'policy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/policies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location'],\n                pathParams: ['location', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'policy'],\n                pathParams: ['location', 'policy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'policy'],\n                pathParams: ['location', 'policy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v2.Resource$Policies = Resource$Policies;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v2/projects/{project}/locations/{location}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location'],\n                pathParams: ['location', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v2.Resource$Projects = Resource$Projects;\n    class Resource$Resourcerecordsets {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone'],\n                pathParams: ['location', 'managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets/{name}/{type}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone', 'name', 'type'],\n                pathParams: ['location', 'managedZone', 'name', 'project', 'type'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets/{name}/{type}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone', 'name', 'type'],\n                pathParams: ['location', 'managedZone', 'name', 'project', 'type'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone'],\n                pathParams: ['location', 'managedZone', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets/{name}/{type}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'managedZone', 'name', 'type'],\n                pathParams: ['location', 'managedZone', 'name', 'project', 'type'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v2.Resource$Resourcerecordsets = Resource$Resourcerecordsets;\n    class Resource$Responsepolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/responsePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'location'],\n                pathParams: ['location', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'responsePolicy'],\n                pathParams: ['location', 'project', 'responsePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'responsePolicy'],\n                pathParams: ['location', 'project', 'responsePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/responsePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location'],\n                pathParams: ['location', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'responsePolicy'],\n                pathParams: ['location', 'project', 'responsePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'responsePolicy'],\n                pathParams: ['location', 'project', 'responsePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v2.Resource$Responsepolicies = Resource$Responsepolicies;\n    class Resource$Responsepolicyrules {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'responsePolicy'],\n                pathParams: ['location', 'project', 'responsePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'location',\n                    'responsePolicy',\n                    'responsePolicyRule',\n                ],\n                pathParams: [\n                    'location',\n                    'project',\n                    'responsePolicy',\n                    'responsePolicyRule',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'location',\n                    'responsePolicy',\n                    'responsePolicyRule',\n                ],\n                pathParams: [\n                    'location',\n                    'project',\n                    'responsePolicy',\n                    'responsePolicyRule',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'location', 'responsePolicy'],\n                pathParams: ['location', 'project', 'responsePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'location',\n                    'responsePolicy',\n                    'responsePolicyRule',\n                ],\n                pathParams: [\n                    'location',\n                    'project',\n                    'responsePolicy',\n                    'responsePolicyRule',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dns.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'location',\n                    'responsePolicy',\n                    'responsePolicyRule',\n                ],\n                pathParams: [\n                    'location',\n                    'project',\n                    'responsePolicy',\n                    'responsePolicyRule',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v2.Resource$Responsepolicyrules = Resource$Responsepolicyrules;\n})(dns_v2 = exports.dns_v2 || (exports.dns_v2 = {}));\n"]},"metadata":{},"sourceType":"script"}