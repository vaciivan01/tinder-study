{"ast":null,"code":"export default function (e, n) {\n  return n = n || {}, new Promise(function (t, r) {\n    var s = new XMLHttpRequest(),\n        o = [],\n        u = [],\n        i = {},\n        a = function () {\n      return {\n        ok: 2 == (s.status / 100 | 0),\n        statusText: s.statusText,\n        status: s.status,\n        url: s.responseURL,\n        text: function () {\n          return Promise.resolve(s.responseText);\n        },\n        json: function () {\n          return Promise.resolve(s.responseText).then(JSON.parse);\n        },\n        blob: function () {\n          return Promise.resolve(new Blob([s.response]));\n        },\n        clone: a,\n        headers: {\n          keys: function () {\n            return o;\n          },\n          entries: function () {\n            return u;\n          },\n          get: function (e) {\n            return i[e.toLowerCase()];\n          },\n          has: function (e) {\n            return e.toLowerCase() in i;\n          }\n        }\n      };\n    };\n\n    for (var l in s.open(n.method || \"get\", e, !0), s.onload = function () {\n      s.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, function (e, n, t) {\n        o.push(n = n.toLowerCase()), u.push([n, t]), i[n] = i[n] ? i[n] + \",\" + t : t;\n      }), t(a());\n    }, s.onerror = r, s.withCredentials = \"include\" == n.credentials, n.headers) s.setRequestHeader(l, n.headers[l]);\n\n    s.send(n.body || null);\n  });\n}","map":{"version":3,"mappings":"eAAe,UAASA,CAAT,EAAcC,CAAd,EAAcA;AAAAA,SAC5BA,IAAUA,KAAW,EAArBA,EACO,IAAIC,OAAJ,CAAIA,UAAUC,CAAVD,EAAmBE,CAAnBF,EAAmBE;AAAAA,QACvBC,IAAU,IAAIC,cAAJ,EADaF;AAAAA,QAEvBG,IAAO,EAFgBH;AAAAA,QAGvBI,IAAM,EAHiBJ;AAAAA,QAIvBK,IAAU,EAJaL;AAAAA,QAMvBM;AAAAA;AACLC,YAA8B,MAAzBN,EAAQO,MAARP,GAAe,GAAfA,GAAmB,CAAM,CADzBK;AAELG,oBAAYR,EAAQQ,UAFfH;AAGLE,gBAAQP,EAAQO,MAHXF;AAILV,aAAKK,EAAQS,WAJRJ;AAKLK;AAAAA,iBAAYb,QAAQC,OAARD,CAAgBG,EAAQW,YAAxBd,CAAZa;AAAoCC,SAL/BN;AAMLO;AAAAA,iBAAYf,QAAQC,OAARD,CAAgBG,EAAQW,YAAxBd,EAAsCgB,IAAtChB,CAA2CiB,KAAKC,KAAhDlB,CAAZe;AAA4DG,SANvDV;AAOLW;AAAAA,iBAAYnB,QAAQC,OAARD,CAAgB,IAAIoB,IAAJ,CAAS,CAACjB,EAAQK,QAAT,CAAT,CAAhBR,CAAZmB;AAA8CX,SAPzCA;AAQLa,eAAOb,CARFA;AASLD,iBAAS;AACRF;AAAAA,mBAAYA,CAAZA;AAAYA,WADJ;AAERiB;AAAAA,mBAAehB,CAAfgB;AAAehB,WAFP;AAGRiB,yBAAKC,CAALD,EAAKC;AAAAA,mBAAKjB,EAAQiB,EAAEC,WAAFD,EAARjB,CAALiB;AAAeC,WAHZ;AAIRC,yBAAKF,CAALE,EAAKF;AAAAA,mBAAKA,EAAEC,WAAFD,MAAmBjB,CAAxBiB;AAAwBjB;AAJrB;AATJC;AAayBD,KAnBFL;;AAmBEK,SAmB1BoB,IAAMC,CAnBoBrB,IAI/BJ,EAAQ0B,IAAR1B,CAAaJ,EAAQ+B,MAAR/B,IAAkB,KAA/BI,EAAsCL,CAAtCK,EAAsCL,CAAK,CAA3CK,GAEAA,EAAQ4B,MAAR5B,GAAQ4B;AACP5B,QAAQ6B,qBAAR7B,GAAgC8B,OAAhC9B,CAAwC,8BAAxCA,EAAwC,UAAiC+B,CAAjC,EAAoCC,CAApC,EAAyCC,CAAzC,EAAyCA;AAChF/B,UAAKgC,IAALhC,CAAU8B,IAAMA,EAAIV,WAAJU,EAAhB9B,GACAC,EAAI+B,IAAJ/B,CAAS,CAAC6B,CAAD,EAAMC,CAAN,CAAT9B,CADAD,EAEAE,EAAQ4B,CAAR5B,IAAeA,EAAQ4B,CAAR5B,IAAkBA,EAAQ4B,CAAR5B,IAAQ4B,GAAR5B,GAAgB6B,CAAlC7B,GAA4C6B,CAF3D/B;AAE2D+B,OAH5DjC,GAKAF,EAAQO,GAARP,CALAE;AAKQK,KARTL,EAWAA,EAAQmC,OAARnC,GAAkBD,CAXlBC,EAaAA,EAAQoC,eAARpC,GAA+C,aAArBJ,EAAQyC,WAblCrC,EAegBJ,EAAQQ,OAnBOA,EAoB9BJ,EAAQsC,gBAARtC,CAAyByB,CAAzBzB,EAA4BJ,EAAQQ,OAARR,CAAgB6B,CAAhB7B,CAA5BI;;AAGDA,MAAQuC,IAARvC,CAAaJ,EAAQ4C,IAAR5C,IAAgB,IAA7BI;AAA6B,GA1CvB,CAFqBJ;AA4CE","names":["url","options","Promise","resolve","reject","request","XMLHttpRequest","keys","all","headers","response","ok","status","statusText","responseURL","text","responseText","json","then","JSON","parse","blob","Blob","clone","entries","get","n","toLowerCase","has","const","i","open","method","onload","getAllResponseHeaders","replace","m","key","value","push","onerror","withCredentials","credentials","setRequestHeader","send","body"],"sources":["/Users/ivanvaci/Downloads/personal/tinder-study/node_modules/unfetch/src/index.mjs"],"sourcesContent":["export default function(url, options) {\n\toptions = options || {};\n\treturn new Promise( (resolve, reject) => {\n\t\tconst request = new XMLHttpRequest();\n\t\tconst keys = [];\n\t\tconst all = [];\n\t\tconst headers = {};\n\n\t\tconst response = () => ({\n\t\t\tok: (request.status/100|0) == 2,\t\t// 200-299\n\t\t\tstatusText: request.statusText,\n\t\t\tstatus: request.status,\n\t\t\turl: request.responseURL,\n\t\t\ttext: () => Promise.resolve(request.responseText),\n\t\t\tjson: () => Promise.resolve(request.responseText).then(JSON.parse),\n\t\t\tblob: () => Promise.resolve(new Blob([request.response])),\n\t\t\tclone: response,\n\t\t\theaders: {\n\t\t\t\tkeys: () => keys,\n\t\t\t\tentries: () => all,\n\t\t\t\tget: n => headers[n.toLowerCase()],\n\t\t\t\thas: n => n.toLowerCase() in headers\n\t\t\t}\n\t\t});\n\n\t\trequest.open(options.method || 'get', url, true);\n\n\t\trequest.onload = () => {\n\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, (m, key, value) => {\n\t\t\t\tkeys.push(key = key.toLowerCase());\n\t\t\t\tall.push([key, value]);\n\t\t\t\theaders[key] = headers[key] ? `${headers[key]},${value}` : value;\n\t\t\t});\n\t\t\tresolve(response());\n\t\t};\n\n\t\trequest.onerror = reject;\n\n\t\trequest.withCredentials = options.credentials=='include';\n\n\t\tfor (const i in options.headers) {\n\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t}\n\n\t\trequest.send(options.body || null);\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}