{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.androidpublisher_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar androidpublisher_v3;\n\n(function (androidpublisher_v3) {\n  /**\n   * Google Play Android Developer API\n   *\n   * Lets Android application developers access their Google Play accounts.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const androidpublisher = google.androidpublisher('v3');\n   * ```\n   */\n  class Androidpublisher {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.applications = new Resource$Applications(this.context);\n      this.edits = new Resource$Edits(this.context);\n      this.generatedapks = new Resource$Generatedapks(this.context);\n      this.grants = new Resource$Grants(this.context);\n      this.inappproducts = new Resource$Inappproducts(this.context);\n      this.internalappsharingartifacts = new Resource$Internalappsharingartifacts(this.context);\n      this.monetization = new Resource$Monetization(this.context);\n      this.orders = new Resource$Orders(this.context);\n      this.purchases = new Resource$Purchases(this.context);\n      this.reviews = new Resource$Reviews(this.context);\n      this.systemapks = new Resource$Systemapks(this.context);\n      this.users = new Resource$Users(this.context);\n    }\n\n  }\n\n  androidpublisher_v3.Androidpublisher = Androidpublisher;\n\n  class Resource$Applications {\n    constructor(context) {\n      this.context = context;\n      this.deviceTierConfigs = new Resource$Applications$Devicetierconfigs(this.context);\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Applications = Resource$Applications;\n\n  class Resource$Applications$Devicetierconfigs {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/deviceTierConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/deviceTierConfigs/{deviceTierConfigId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'deviceTierConfigId'],\n        pathParams: ['deviceTierConfigId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/deviceTierConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Applications$Devicetierconfigs = Resource$Applications$Devicetierconfigs;\n\n  class Resource$Edits {\n    constructor(context) {\n      this.context = context;\n      this.apks = new Resource$Edits$Apks(this.context);\n      this.bundles = new Resource$Edits$Bundles(this.context);\n      this.countryavailability = new Resource$Edits$Countryavailability(this.context);\n      this.deobfuscationfiles = new Resource$Edits$Deobfuscationfiles(this.context);\n      this.details = new Resource$Edits$Details(this.context);\n      this.expansionfiles = new Resource$Edits$Expansionfiles(this.context);\n      this.images = new Resource$Edits$Images(this.context);\n      this.listings = new Resource$Edits$Listings(this.context);\n      this.testers = new Resource$Edits$Testers(this.context);\n      this.tracks = new Resource$Edits$Tracks(this.context);\n    }\n\n    commit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}:commit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    validate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}:validate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Edits = Resource$Edits;\n\n  class Resource$Edits$Apks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addexternallyhosted(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/externallyHosted').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Edits$Apks = Resource$Edits$Apks;\n\n  class Resource$Edits$Bundles {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Edits$Bundles = Resource$Edits$Bundles;\n\n  class Resource$Edits$Countryavailability {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/countryAvailability/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Edits$Countryavailability = Resource$Edits$Countryavailability;\n\n  class Resource$Edits$Deobfuscationfiles {\n    constructor(context) {\n      this.context = context;\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'deobfuscationFileType'],\n        pathParams: ['apkVersionCode', 'deobfuscationFileType', 'editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Edits$Deobfuscationfiles = Resource$Edits$Deobfuscationfiles;\n\n  class Resource$Edits$Details {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Edits$Details = Resource$Edits$Details;\n\n  class Resource$Edits$Expansionfiles {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n        pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n        pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n        pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n        pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Edits$Expansionfiles = Resource$Edits$Expansionfiles;\n\n  class Resource$Edits$Images {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language', 'imageType', 'imageId'],\n        pathParams: ['editId', 'imageId', 'imageType', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deleteall(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n        pathParams: ['editId', 'imageType', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n        pathParams: ['editId', 'imageType', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n        pathParams: ['editId', 'imageType', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Edits$Images = Resource$Edits$Images;\n\n  class Resource$Edits$Listings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language'],\n        pathParams: ['editId', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deleteall(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language'],\n        pathParams: ['editId', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language'],\n        pathParams: ['editId', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language'],\n        pathParams: ['editId', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Edits$Listings = Resource$Edits$Listings;\n\n  class Resource$Edits$Testers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Edits$Testers = Resource$Edits$Testers;\n\n  class Resource$Edits$Tracks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Edits$Tracks = Resource$Edits$Tracks;\n\n  class Resource$Generatedapks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    download(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/generatedApks/{versionCode}/downloads/{downloadId}:download').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'versionCode', 'downloadId'],\n        pathParams: ['downloadId', 'packageName', 'versionCode'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/generatedApks/{versionCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'versionCode'],\n        pathParams: ['packageName', 'versionCode'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Generatedapks = Resource$Generatedapks;\n\n  class Resource$Grants {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+parent}/grants').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Grants = Resource$Grants;\n\n  class Resource$Inappproducts {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/inappproducts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/inappproducts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Inappproducts = Resource$Inappproducts;\n\n  class Resource$Internalappsharingartifacts {\n    constructor(context) {\n      this.context = context;\n    }\n\n    uploadapk(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/apk').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/apk').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    uploadbundle(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/bundle').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/bundle').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Internalappsharingartifacts = Resource$Internalappsharingartifacts;\n\n  class Resource$Monetization {\n    constructor(context) {\n      this.context = context;\n    }\n\n    convertRegionPrices(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/pricing:convertRegionPrices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Monetization = Resource$Monetization;\n\n  class Resource$Orders {\n    constructor(context) {\n      this.context = context;\n    }\n\n    refund(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/orders/{orderId}:refund').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'orderId'],\n        pathParams: ['orderId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Orders = Resource$Orders;\n\n  class Resource$Purchases {\n    constructor(context) {\n      this.context = context;\n      this.products = new Resource$Purchases$Products(this.context);\n      this.subscriptions = new Resource$Purchases$Subscriptions(this.context);\n      this.voidedpurchases = new Resource$Purchases$Voidedpurchases(this.context);\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Purchases = Resource$Purchases;\n\n  class Resource$Purchases$Products {\n    constructor(context) {\n      this.context = context;\n    }\n\n    acknowledge(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}:acknowledge').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'token'],\n        pathParams: ['packageName', 'productId', 'token'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'token'],\n        pathParams: ['packageName', 'productId', 'token'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Purchases$Products = Resource$Purchases$Products;\n\n  class Resource$Purchases$Subscriptions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    acknowledge(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:acknowledge').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    defer(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    refund(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    revoke(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Purchases$Subscriptions = Resource$Purchases$Subscriptions;\n\n  class Resource$Purchases$Voidedpurchases {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/voidedpurchases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Purchases$Voidedpurchases = Resource$Purchases$Voidedpurchases;\n\n  class Resource$Reviews {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/reviews/{reviewId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'reviewId'],\n        pathParams: ['packageName', 'reviewId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/reviews').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    reply(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/reviews/{reviewId}:reply').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'reviewId'],\n        pathParams: ['packageName', 'reviewId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Reviews = Resource$Reviews;\n\n  class Resource$Systemapks {\n    constructor(context) {\n      this.context = context;\n      this.variants = new Resource$Systemapks$Variants(this.context);\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Systemapks = Resource$Systemapks;\n\n  class Resource$Systemapks$Variants {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'versionCode'],\n        pathParams: ['packageName', 'versionCode'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    download(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}:download').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'versionCode', 'variantId'],\n        pathParams: ['packageName', 'variantId', 'versionCode'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'versionCode', 'variantId'],\n        pathParams: ['packageName', 'variantId', 'versionCode'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'versionCode'],\n        pathParams: ['packageName', 'versionCode'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Systemapks$Variants = Resource$Systemapks$Variants;\n\n  class Resource$Users {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+parent}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+parent}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v3.Resource$Users = Resource$Users;\n})(androidpublisher_v3 = exports.androidpublisher_v3 || (exports.androidpublisher_v3 = {}));","map":{"version":3,"sources":["/Users/ivanvaci/Downloads/personal/tinder-study/node_modules/googleapis/build/src/apis/androidpublisher/v3.js"],"names":["Object","defineProperty","exports","value","androidpublisher_v3","googleapis_common_1","require","Androidpublisher","constructor","options","google","context","_options","applications","Resource$Applications","edits","Resource$Edits","generatedapks","Resource$Generatedapks","grants","Resource$Grants","inappproducts","Resource$Inappproducts","internalappsharingartifacts","Resource$Internalappsharingartifacts","monetization","Resource$Monetization","orders","Resource$Orders","purchases","Resource$Purchases","reviews","Resource$Reviews","systemapks","Resource$Systemapks","users","Resource$Users","deviceTierConfigs","Resource$Applications$Devicetierconfigs","create","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","list","apks","Resource$Edits$Apks","bundles","Resource$Edits$Bundles","countryavailability","Resource$Edits$Countryavailability","deobfuscationfiles","Resource$Edits$Deobfuscationfiles","details","Resource$Edits$Details","expansionfiles","Resource$Edits$Expansionfiles","images","Resource$Edits$Images","listings","Resource$Edits$Listings","testers","Resource$Edits$Testers","tracks","Resource$Edits$Tracks","commit","delete","insert","validate","addexternallyhosted","upload","mediaUrl","patch","update","deleteall","download","uploadapk","uploadbundle","convertRegionPrices","refund","products","Resource$Purchases$Products","subscriptions","Resource$Purchases$Subscriptions","voidedpurchases","Resource$Purchases$Voidedpurchases","acknowledge","cancel","defer","revoke","reply","variants","Resource$Systemapks$Variants"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.androidpublisher_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar androidpublisher_v3;\n(function (androidpublisher_v3) {\n    /**\n     * Google Play Android Developer API\n     *\n     * Lets Android application developers access their Google Play accounts.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const androidpublisher = google.androidpublisher('v3');\n     * ```\n     */\n    class Androidpublisher {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.applications = new Resource$Applications(this.context);\n            this.edits = new Resource$Edits(this.context);\n            this.generatedapks = new Resource$Generatedapks(this.context);\n            this.grants = new Resource$Grants(this.context);\n            this.inappproducts = new Resource$Inappproducts(this.context);\n            this.internalappsharingartifacts =\n                new Resource$Internalappsharingartifacts(this.context);\n            this.monetization = new Resource$Monetization(this.context);\n            this.orders = new Resource$Orders(this.context);\n            this.purchases = new Resource$Purchases(this.context);\n            this.reviews = new Resource$Reviews(this.context);\n            this.systemapks = new Resource$Systemapks(this.context);\n            this.users = new Resource$Users(this.context);\n        }\n    }\n    androidpublisher_v3.Androidpublisher = Androidpublisher;\n    class Resource$Applications {\n        constructor(context) {\n            this.context = context;\n            this.deviceTierConfigs = new Resource$Applications$Devicetierconfigs(this.context);\n        }\n    }\n    androidpublisher_v3.Resource$Applications = Resource$Applications;\n    class Resource$Applications$Devicetierconfigs {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/deviceTierConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/deviceTierConfigs/{deviceTierConfigId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'deviceTierConfigId'],\n                pathParams: ['deviceTierConfigId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/deviceTierConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Applications$Devicetierconfigs = Resource$Applications$Devicetierconfigs;\n    class Resource$Edits {\n        constructor(context) {\n            this.context = context;\n            this.apks = new Resource$Edits$Apks(this.context);\n            this.bundles = new Resource$Edits$Bundles(this.context);\n            this.countryavailability = new Resource$Edits$Countryavailability(this.context);\n            this.deobfuscationfiles = new Resource$Edits$Deobfuscationfiles(this.context);\n            this.details = new Resource$Edits$Details(this.context);\n            this.expansionfiles = new Resource$Edits$Expansionfiles(this.context);\n            this.images = new Resource$Edits$Images(this.context);\n            this.listings = new Resource$Edits$Listings(this.context);\n            this.testers = new Resource$Edits$Testers(this.context);\n            this.tracks = new Resource$Edits$Tracks(this.context);\n        }\n        commit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}:commit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}:validate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits = Resource$Edits;\n    class Resource$Edits$Apks {\n        constructor(context) {\n            this.context = context;\n        }\n        addexternallyhosted(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/externallyHosted').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Apks = Resource$Edits$Apks;\n    class Resource$Edits$Bundles {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Bundles = Resource$Edits$Bundles;\n    class Resource$Edits$Countryavailability {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/countryAvailability/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Countryavailability = Resource$Edits$Countryavailability;\n    class Resource$Edits$Deobfuscationfiles {\n        constructor(context) {\n            this.context = context;\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: [\n                    'packageName',\n                    'editId',\n                    'apkVersionCode',\n                    'deobfuscationFileType',\n                ],\n                pathParams: [\n                    'apkVersionCode',\n                    'deobfuscationFileType',\n                    'editId',\n                    'packageName',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Deobfuscationfiles = Resource$Edits$Deobfuscationfiles;\n    class Resource$Edits$Details {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Details = Resource$Edits$Details;\n    class Resource$Edits$Expansionfiles {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'packageName',\n                    'editId',\n                    'apkVersionCode',\n                    'expansionFileType',\n                ],\n                pathParams: [\n                    'apkVersionCode',\n                    'editId',\n                    'expansionFileType',\n                    'packageName',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: [\n                    'packageName',\n                    'editId',\n                    'apkVersionCode',\n                    'expansionFileType',\n                ],\n                pathParams: [\n                    'apkVersionCode',\n                    'editId',\n                    'expansionFileType',\n                    'packageName',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: [\n                    'packageName',\n                    'editId',\n                    'apkVersionCode',\n                    'expansionFileType',\n                ],\n                pathParams: [\n                    'apkVersionCode',\n                    'editId',\n                    'expansionFileType',\n                    'packageName',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: [\n                    'packageName',\n                    'editId',\n                    'apkVersionCode',\n                    'expansionFileType',\n                ],\n                pathParams: [\n                    'apkVersionCode',\n                    'editId',\n                    'expansionFileType',\n                    'packageName',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Expansionfiles = Resource$Edits$Expansionfiles;\n    class Resource$Edits$Images {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'packageName',\n                    'editId',\n                    'language',\n                    'imageType',\n                    'imageId',\n                ],\n                pathParams: [\n                    'editId',\n                    'imageId',\n                    'imageType',\n                    'language',\n                    'packageName',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteall(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n                pathParams: ['editId', 'imageType', 'language', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n                pathParams: ['editId', 'imageType', 'language', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n                pathParams: ['editId', 'imageType', 'language', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Images = Resource$Edits$Images;\n    class Resource$Edits$Listings {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language'],\n                pathParams: ['editId', 'language', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteall(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language'],\n                pathParams: ['editId', 'language', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language'],\n                pathParams: ['editId', 'language', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language'],\n                pathParams: ['editId', 'language', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Listings = Resource$Edits$Listings;\n    class Resource$Edits$Testers {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Testers = Resource$Edits$Testers;\n    class Resource$Edits$Tracks {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Tracks = Resource$Edits$Tracks;\n    class Resource$Generatedapks {\n        constructor(context) {\n            this.context = context;\n        }\n        download(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/generatedApks/{versionCode}/downloads/{downloadId}:download').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'versionCode', 'downloadId'],\n                pathParams: ['downloadId', 'packageName', 'versionCode'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/generatedApks/{versionCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'versionCode'],\n                pathParams: ['packageName', 'versionCode'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Generatedapks = Resource$Generatedapks;\n    class Resource$Grants {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+parent}/grants').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Grants = Resource$Grants;\n    class Resource$Inappproducts {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'sku'],\n                pathParams: ['packageName', 'sku'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'sku'],\n                pathParams: ['packageName', 'sku'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/inappproducts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/inappproducts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'sku'],\n                pathParams: ['packageName', 'sku'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'sku'],\n                pathParams: ['packageName', 'sku'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Inappproducts = Resource$Inappproducts;\n    class Resource$Internalappsharingartifacts {\n        constructor(context) {\n            this.context = context;\n        }\n        uploadapk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/apk').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/apk').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        uploadbundle(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/bundle').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/bundle').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Internalappsharingartifacts = Resource$Internalappsharingartifacts;\n    class Resource$Monetization {\n        constructor(context) {\n            this.context = context;\n        }\n        convertRegionPrices(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/pricing:convertRegionPrices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Monetization = Resource$Monetization;\n    class Resource$Orders {\n        constructor(context) {\n            this.context = context;\n        }\n        refund(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/orders/{orderId}:refund').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'orderId'],\n                pathParams: ['orderId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Orders = Resource$Orders;\n    class Resource$Purchases {\n        constructor(context) {\n            this.context = context;\n            this.products = new Resource$Purchases$Products(this.context);\n            this.subscriptions = new Resource$Purchases$Subscriptions(this.context);\n            this.voidedpurchases = new Resource$Purchases$Voidedpurchases(this.context);\n        }\n    }\n    androidpublisher_v3.Resource$Purchases = Resource$Purchases;\n    class Resource$Purchases$Products {\n        constructor(context) {\n            this.context = context;\n        }\n        acknowledge(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}:acknowledge').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'token'],\n                pathParams: ['packageName', 'productId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'token'],\n                pathParams: ['packageName', 'productId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Purchases$Products = Resource$Purchases$Products;\n    class Resource$Purchases$Subscriptions {\n        constructor(context) {\n            this.context = context;\n        }\n        acknowledge(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:acknowledge').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        defer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        refund(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        revoke(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Purchases$Subscriptions = Resource$Purchases$Subscriptions;\n    class Resource$Purchases$Voidedpurchases {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/voidedpurchases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Purchases$Voidedpurchases = Resource$Purchases$Voidedpurchases;\n    class Resource$Reviews {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/reviews/{reviewId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'reviewId'],\n                pathParams: ['packageName', 'reviewId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/reviews').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reply(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/reviews/{reviewId}:reply').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'reviewId'],\n                pathParams: ['packageName', 'reviewId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Reviews = Resource$Reviews;\n    class Resource$Systemapks {\n        constructor(context) {\n            this.context = context;\n            this.variants = new Resource$Systemapks$Variants(this.context);\n        }\n    }\n    androidpublisher_v3.Resource$Systemapks = Resource$Systemapks;\n    class Resource$Systemapks$Variants {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'versionCode'],\n                pathParams: ['packageName', 'versionCode'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        download(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}:download').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'versionCode', 'variantId'],\n                pathParams: ['packageName', 'variantId', 'versionCode'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'versionCode', 'variantId'],\n                pathParams: ['packageName', 'variantId', 'versionCode'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'versionCode'],\n                pathParams: ['packageName', 'versionCode'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Systemapks$Variants = Resource$Systemapks$Variants;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+parent}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+parent}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Users = Resource$Users;\n})(androidpublisher_v3 = exports.androidpublisher_v3 || (exports.androidpublisher_v3 = {}));\n"]},"metadata":{},"sourceType":"script"}